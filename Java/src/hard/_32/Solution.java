package hard._32;

import java.util.Stack;

public class Solution {

    public int longestValidParentheses(String s) {

        int max = 0;

        if (s == null || s.isEmpty()) {
            return max;
        }

        /**
         *
         * ( -> dp[i - 1] + 0
         * )  down
         *  () 2 -> dp[i - 1] + 2
         *  4200
         *  (()) 4 -> dp [i-1] = dp[i] + dp[i−dp[i−1]−2] + 2
         */

        s = " " + s;
        // the last index the longest length
        int[] dp = new int[s.length()];

        dp[0] = 0;
        dp[1] = 0;

        for (int i = 2; i < s.length(); i ++) {

            char c = s.charAt(i);

            if (c == '(') {
                dp[i] = 0;
            } else {
                if (s.charAt(i - 1) == '(') {
                    dp[i] = dp[i - 1] + 2;
                } else {
                    if (dp[i - 1] == 0) {
                        dp[i] = 0;
                    } else {
                        // TODO
                    }
                }
            }
            if (dp[i] > max) {
                max = dp[i];
            }

        }

        return max;
    }

    class StackSolution {
        public int longestValidParentheses(String s) {

            int max = 0;

            if (s == null || s.isEmpty()) {
                return max;
            }

            for ( int i = 0; i < s.length(); i ++) {
                for ( int j = s.length(); j >= i; j --) {
                    boolean valid = isValid(s.substring(i, j));
                    if (valid && max < j - i ) {
                        max = j - i;
                    }
                }
            }

            return max;
        }

        boolean isValid(String s) {

            Stack<Character> stack = new Stack<>();
            for (char c : s.toCharArray()) {
                if ('(' == c) {
                    stack.push(c);
                } else if (stack.isEmpty()) {
                    return false;
                } else {
                    stack.pop();
                }
            }

            return stack.isEmpty();

        }
    }



    public static void main(String[] args) {
        Solution solution = new Solution();
        int v = solution.new StackSolution().longestValidParentheses("())()()(())((()(()()(((()))((((())((()(())()())(()((((()))()(()))(())()(())(()(((((())((((((()())())(()(()((())()))(()))))))()(()))((((())()()()))()()()(((()(()())(()()(()(()()(((()))))))()()))())())((()()))))))((()))(((()((())()(()()))((())))()()())))))))()))))(()))))()))()))()((())))((()))(()))))))(((()))))))))()(()()()(())((())()))()()(())))()()))(()())()))(((()())()))((())((((()))(()(()(()()()(((())()(((((()))((()(((((())(()()))((((((((()(()(()(()(())))(())(()())())(()((((()(())((()(())))(())))()(((((()(()()(())))))))())(())(())(()()(((())))((()))(((((()))))())))()((()))()))))())))))((())(((((()()))((((())))(((()(()(())())(((()(()(()()()())))())()))((()((())())()()()(((())(((((()((((((()((()())))((((())((()(((((((()(()((()()()(()(()())(()(()()((((())))()(((()())))(()()))()(()()()()(((((())(()))))((()))())))()((((((()))())))()(()))(())))((((()())(((((()()())(((((())(()())(()))))()(()()))()))))))())))(((())(()(()()))(()))()(((())))())((((()(((()))))))()(()(()))()()(()()))))))))((()))))))(())((()((()))()))((((((()())))))(()((())((((()))))(()(()()()()(()))()()(()(()))(()()(((((((()())(())(()())((())())()(()())((())()())())(()())))())))(())())())(())((()())(((()()))()))()()))()(()(())((((((((())))()((())((()((((((((((()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()((())()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(()((())))((((()()(())))())(())(()(()(())())())(()()())()(())())))(()()(((())))((()()(((())()()(()())((((()()(()())(()((((()(()()(()(()(((()((()())(()()))(()((((()(((((()))))()()))(((()((((((()(()()()()())()))(()(())))))((()(((()())())))(((()()))(()(()(((((((()()))(()(())))())()(())())(())(()))(())(()))()()(()()())))))()))()((())(((()((((((((())()()))())))((()())(");
        System.out.printf(String.valueOf(v));
    }

}
